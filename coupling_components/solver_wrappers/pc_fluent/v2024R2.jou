;   GENERAL SETTINGS
file set-batch-options n n n
;file start-transcript "transcript.txt"
(enable-dynamic-mesh-node-ids #t)
;file binary-files n
(define unsteady |UNSTEADY|)
(define multiphase |MULTIPHASE|)
(define flow_iterations |FLOW_ITERATIONS|)
(define delta_t |DELTA_T|)
(define timestep_start |TIMESTEP_START|)
(define moving_boundary |MOVING_BOUNDARY|)
(define force_balance |FORCE_BALANCE|)
(define thermal_bc |THERMAL_BC|)
(define temp_stored |TEMP_STORED|)
;
;   FUNCTION DEFINITIONS
(define (send_message message)
    (system (string-append "touch " message ".coco"))
)
(define (wait_message message)
    (do ((j 0 j)) ((= j 1))
        (if
            (file-exists? (string-append message ".coco"))
            (begin
                (set! j 1)
                (system (string-append "rm " message ".coco"))
            )
            (system "sleep 0.1")
        )
    )
)
(define (check_message message)
    (if
        (file-exists? (string-append message ".coco"))
        (begin
            (newline)(display (string-append "RECEIVED MESSAGE " message))(newline)
            (system (string-append "rm " message ".coco"))
            (= 0 0)
        )
        (= 0 1)
    )
)
(define (print-iter-info)
    (begin
        (newline)
        (display (format #f "### timestep ~a, iteration ~a ###"
            (%rpgetvar 'udf/timestep) (%rpgetvar 'udf/iteration)) )
        (newline)
    )
)
;
;   READ CASE/DATA, COMPILE AND LOAD UDF
(if (= timestep_start 0)
    (begin
        (ti-menu-load-string "file read-case-data |CASE|")
        (if multiphase
            (ti-menu-load-string "solve set expert y n y y y")
            (ti-menu-load-string "solve set expert n y y y")
        )
        (rp-var-define 'udf/timestep 0 'int #f)
        (rp-var-define 'udf/iteration 0 'int #f)
        (ti-menu-load-string "define user-defined compiled-functions compile \"udf_thermal\" y \"udf_v2024R2.c\" \"\" \"\"")
        (ti-menu-load-string "define user-defined compiled-functions load \"udf_thermal\"")
    )
    (ti-menu-load-string (format #f "file read-case-data \"case_timestep~a.cas\"" timestep_start))
)
;
;   SAVE CASE INFO TO TEXT FILE
report summary y "report.sum"
(send_message "case_info_exported")
;
;   GET_THREAD_IDS IN UDF AND JOURNAL
(wait_message "thread_ids_written_to_file")
define user-defined execute-on-demand "get_thread_ids::udf_thermal"
(define face_threads (list|THREAD_NAMES|))
;
;   SETUP DYNAMIC MESH
(if (= timestep_start 0)
    (begin
        (if unsteady
            (ti-menu-load-string "define dynamic-mesh dynamic-mesh? yes no no yes no\n") ; 4th: Enable Implicit Update? Yes
        )
        (do ((k 0 (+ k 1))) ((>= k (length face_threads)))
            (if moving_boundary
                (ti-menu-load-string (format #f "define dynamic-mesh zones create ~a user-defined \"move_nodes::udf_thermal\" yes no , constant 0 no no no\n"(list-ref face_threads k))) ; Option after UDF: exclude mesh motion in bc's? yes / Option[-3]: deform adjacent BL with zone? no -> change to yes in parameters if necessary
                (ti-menu-load-string (format #f "define dynamic-mesh zones create ~a stationary , constant 0 no\n"(list-ref face_threads k))) ; In case the interface is stationary
            )
        )
        (if unsteady
            (begin
                (ti-menu-load-string "define dynamic-mesh controls implicit-update-parameters motion-relaxation 1\n")
                (ti-menu-load-string "define dynamic-mesh controls implicit-update-parameters residual-criteria -1\n")
                (ti-menu-load-string "define dynamic-mesh controls implicit-update-parameters update-interval 1\n")
            )
        )
    )
)
;
;   STORE COORDINATES AND IDS
(if (= timestep_start 0)
    (begin
        (ti-menu-load-string "define user-defined execute-on-demand \"store_coordinates_id::udf_thermal\"")
        (send_message "nodes_and_faces_stored")
    )
)
;
;   HOOK SOURCE UDFs TO CONSERVATION EQUATIONS AND SET ADJACENT FLAGS
(if moving_boundary
    (begin
        (ti-menu-load-string "define user-defined execute-on-demand \"ini_udm::udf_thermal\"")
        (ti-menu-load-string "define user-defined execute-on-demand \"set_adjacent::udf_thermal\"")
        (ti-menu-load-string "define user-defined execute-on-demand \"calc_volume_change::udf_thermal\"")
        (ti-menu-load-string "define user-defined execute-on-demand \"update_cell_enthalpy::udf_thermal\"")
        (ti-menu-load-string "define user-defined execute-on-demand \"activator::udf_thermal\"")
        (if (= thermal_bc 1)
            (ti-menu-load-string "define boundary-conditions fluid , n y 0 0 0 1 n y \"udf_energy_source::udf_thermal\" n n n , n , n y n") ; heat flux BC -> solid
            (ti-menu-load-string "define boundary-conditions fluid , n y 1 n y \"udf_mass_source::udf_thermal\" 0 0 1 n y \"udf_energy_source::udf_thermal\" n n n , n , n y n") ; temp. BC or nothing -> liquid
        )
    )
)
;
;   HOOK PROFILE UDFs TO INTERFACE BOUNDARY CONDITIONS
(if (= timestep_start 0)
    (cond ((= thermal_bc 0)
            (do ((k 0 (+ k 1))) ((>= k (length face_threads)))
            (ti-menu-load-string (format #f "define boundary-conditions wall ~a no 0 no 0 no yes temperature yes yes \"udf\" \"set_temperature::udf_thermal\" no no no ,\n"(list-ref face_threads k)))
            ))
            ((= thermal_bc 1)
            (do ((k 0 (+ k 1))) ((>= k (length face_threads)))
            (ti-menu-load-string (format #f "define boundary-conditions wall ~a no 0 no 0 no yes heat-flux yes yes \"udf\" \"set_heat_flux::udf_thermal\" no no no ,\n"(list-ref face_threads k))) ; Previous command after udf: "no no no 0 no ,"
            ))
    )
)
;
;   SET DELTA_T
(if unsteady
    (ti-menu-load-string (format #f "solve set time-step ~a" delta_t))
)
;
; END OF SETUP COMMANDS
|END_OF_SETUP_COMMANDS|
;
;   FSI LOOP
(do ((j 0 j)) ((= j 1))
    (system "sleep 0.1")
    (if (check_message "save")
        (begin
            (ti-menu-load-string (format #f "file write-case-data \"case_timestep~a.cas\"" (%rpgetvar 'udf/timestep)))
            (send_message "save_ready")
        )
    )
    (if (check_message "next")
        (begin
            |END_OF_TIMESTEP_COMMANDS|
            (rpsetvar 'udf/iteration 0)
            (rpsetvar 'udf/timestep (+ (%rpgetvar 'udf/timestep) 1))
            (print-iter-info)
            (send_message "next_ready")
        )
    )
    (if (check_message "continue")
        (begin
            (rpsetvar 'udf/iteration (+ (%rpgetvar 'udf/iteration) 1))
            (print-iter-info)
            (if unsteady
                (if (= (%rpgetvar 'udf/iteration) 1)
                    (begin
                        (ti-menu-load-string "solve dual-time-iterate 1 0")
                        (if moving_boundary
                            (ti-menu-load-string "define user-defined execute-on-demand \"update_cell_enthalpy::udf_thermal\"")
                        )
                        (ti-menu-load-string "solve iterate 1")
                        (if moving_boundary
                            (begin
                                (ti-menu-load-string "define user-defined execute-on-demand \"set_adjacent::udf_thermal\"")
                                (ti-menu-load-string "define user-defined execute-on-demand \"calc_volume_change::udf_thermal\"") ; updated each coupling iteration -> necessary for mass & energy source term
                            )
                        )
                        (ti-menu-load-string (format #f "solve iterate ~d" (- flow_iterations 1)))
                    )
                    (begin
                        (ti-menu-load-string "solve dual-time-iterate 0 1")
                        (ti-menu-load-string "solve iterate 1")
                        (if moving_boundary
                            (begin
                                (ti-menu-load-string "define user-defined execute-on-demand \"set_adjacent::udf_thermal\"")
                                (ti-menu-load-string "define user-defined execute-on-demand \"calc_volume_change::udf_thermal\"") ; updated each coupling iteration -> necessary for mass & energy source term
                            )
                        )
                        (ti-menu-load-string "solve dual-time-iterate 0 0")
                        (ti-menu-load-string (format #f "solve iterate ~d" (- flow_iterations 1)))
                    )
                )
                (begin
                    (ti-menu-load-string "solve mesh-motion y")
                    (ti-menu-load-string "solve iterate flow_iterations")
                )
            )
            (ti-menu-load-string "define user-defined execute-on-demand \"activator::udf_thermal\"")
            (if force_balance
                (ti-menu-load-string "define user-defined execute-on-demand \"store_pressure_traction::udf_thermal\"")
            )
            (if (= thermal_bc 1)
                (begin
                    (if temp_stored
                        (ti-menu-load-string "define user-defined execute-on-demand \"store_temperature::udf_thermal\"")
                    )
                    (if moving_boundary
                        (ti-menu-load-string "define user-defined execute-on-demand \"write_displacement::udf_thermal\"")
                    )
                )
                (ti-menu-load-string "define user-defined execute-on-demand \"store_heat_flux::udf_thermal\"")
            )
            (send_message "continue_ready")
        )
    )
    (if (check_message "store_grid")
        (begin
            (ti-menu-load-string "define user-defined execute-on-demand \"store_coordinates_id::udf_thermal\"")
            (send_message "store_grid_ready")
        )
    )
    (if (check_message "stop")
        (begin
            |END_OF_TIMESTEP_COMMANDS|
            (set! j 1)
            (send_message "stop_ready")
            (system "sleep 0.1")
        )
    )
)
exit y

