;   GENERAL SETTINGS
file set-batch-options n n n
;file start-transcript "transcript.txt"
(enable-dynamic-mesh-node-ids #t)
;file binary-files n
(define unsteady |UNSTEADY|)
(define multiphase |MULTIPHASE|)
(define flow_iterations |FLOW_ITERATIONS|)
(define check_coupling_convergence |CHECK_COUPLING_CONVERGENCE|)
(define delta_t |DELTA_T|)
(define timestep_start |TIMESTEP_START|)
(define rigid_body_motion |RIGID_BODY_MOTION|)
(define dimension_2D |DIMENSION_2D|)

;
;   FUNCTION DEFINITIONS
(define (send_message message)
    (system (string-append "touch " message ".coco"))
)
(define (wait_message message)
    (do ((j 0 j)) ((= j 1))
        (if
            (file-exists? (string-append message ".coco"))
            (begin
                (set! j 1)
                (system (string-append "rm " message ".coco"))
            )
            (system "sleep 0.1")
        )
    )
)
(define (check_message message)
    (if
        (file-exists? (string-append message ".coco"))
        (begin
            (newline)(display (string-append "RECEIVED MESSAGE " message))(newline)
            (system (string-append "rm " message ".coco"))
            (= 0 0)
        )
        (= 0 1)
    )
)
(define (print-iter-info)
    (begin
        (newline)
        (display (format #f "### timestep ~a, iteration ~a ###"
            (%rpgetvar 'udf/timestep) (%rpgetvar 'udf/iteration)) )
        (newline)
    )
)
;
;   READ CASE/DATA, COMPILE AND LOAD UDF
(if (= timestep_start 0)
    (begin
        (ti-menu-load-string "file read-case-data |CASE|")
        (if multiphase
            (ti-menu-load-string "solve set expert y y n y")
            (ti-menu-load-string "solve set expert y n y")
        )
        (rp-var-define 'udf/timestep 0 'int #f)
        (rp-var-define 'udf/iteration 0 'int #f)
        (ti-menu-load-string "define user-defined compiled-functions compile \"v2023R1\" y \"v2023R1.c\" \"\" \"\"")
        (ti-menu-load-string "define user-defined compiled-functions load \"v2023R1\"")
    )
    (ti-menu-load-string (format #f "file read-case-data \"case_timestep~a.cas\"" timestep_start))
)
;   STORE REPORTING INTERVAL
;
(define reporting_interval (%rpgetvar 'iteration-chunk))
;
;   SAVE CASE INFO TO TEXT FILE
report summary y "report.sum"
(send_message "case_info_exported")
;
;   GET_THREAD_IDS IN UDF AND JOURNAL
(wait_message "thread_ids_written_to_file")
define user-defined execute-on-demand "get_thread_ids::v2023R1"
(define face_threads (list|THREAD_NAMES|))
(define moving_zones (list|MOVING_ZONES|))
;
;   SETUP ZONE MOTION
; WING
(if (and (= timestep_start 0) rigid_body_motion )
    (begin
         (ti-menu-load-string (format #f "define boundary-condition fluid ~a no no no no no 0 no 0 no 0 no 0 no 0 no 1
         yes -1 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 1 \"move_zone_wing::v2023R1\" no no no no no\n" (list-ref moving_zones 0)))
    )
)
; ELEVATOR
(if (and (= timestep_start 0) rigid_body_motion )
    (begin
         (ti-menu-load-string (format #f "define boundary-condition fluid ~a no no no no no 0 no 0 no 0 no 0 no 0 no 1
         yes -1 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 1 \"move_zone_elevator::v2023R1\" no no no no no\n" (list-ref moving_zones 1)))
    )
)
; RUDDER left
(if (and (= timestep_start 0) rigid_body_motion )
    (begin
         (ti-menu-load-string (format #f "define boundary-condition fluid ~a no no no no no 0 no 0 no 0 no 0 no 0 no 1
         yes -1 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 1 \"move_zone_rudder_left::v2023R1\" no no no no no\n" (list-ref moving_zones 2)))
    )
)
; RUDDER right
(if (and (= timestep_start 0) rigid_body_motion )
    (begin
         (ti-menu-load-string (format #f "define boundary-condition fluid ~a no no no no no 0 no 0 no 0 no 0 no 0 no 1
         yes -1 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 1 \"move_zone_rudder_right::v2023R1\" no no no no no\n" (list-ref moving_zones 3)))
    )
)

; AILERON left
(if (and (= timestep_start 0) rigid_body_motion )
    (begin
         (ti-menu-load-string (format #f "define boundary-condition fluid ~a no no no no no 0 no 0 no 0 no 0 no 0 no 1
         yes -1 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 1 \"move_zone_aileron_left::v2023R1\" no no no no no\n" (list-ref moving_zones 4)))
    )
)

; AILERON right
(if (and (= timestep_start 0) rigid_body_motion )
    (begin
         (ti-menu-load-string (format #f "define boundary-condition fluid ~a no no no no no 0 no 0 no 0 no 0 no 0 no 1
         yes -1 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 0 no 1 \"move_zone_aileron_right::v2023R1\" no no no no no\n" (list-ref moving_zones 5)))
    )
)

;   SETUP DYNAMIC MESH
;(if (= timestep_start 0)
;    (begin
;        (if unsteady
;            (ti-menu-load-string "define dynamic-mesh dynamic-mesh? yes no no yes no\n")
;        )
;        (do ((k 0 (+ k 1))) ((>= k (length face_threads)))
;            (ti-menu-load-string (format #f "define dynamic-mesh zones create ~a user-defined \"move_nodes::v2023R1\" no no , constant 0 no no no\n"(list-ref face_threads k))) ; new lines matter in journal scripts
;        )
;        (if unsteady
;            (begin
;                (ti-menu-load-string "define dynamic-mesh controls implicit-update-parameters motion-relaxation 1\n")
;                (ti-menu-load-string "define dynamic-mesh controls implicit-update-parameters residual-criteria -1\n")
;                (ti-menu-load-string "define dynamic-mesh controls implicit-update-parameters update-interval 1\n")
;            )
;        )
;    )
;)
;
;   STORE COORDINATES AND IDS
(if (= timestep_start 0)
    (begin
        (ti-menu-load-string "define user-defined execute-on-demand \"store_coordinates_id::v2023R1\"")
        (send_message "nodes_and_faces_stored")
    )
)
;
;   SET DELTA_T
(if unsteady
    (ti-menu-load-string (format #f "solve set time-step ~a" delta_t))
)
;
;   FSI LOOP
(do ((j 0 j)) ((= j 1))
    (system "sleep 0.1")
    (if (check_message "save")
        (begin
            (ti-menu-load-string (format #f "file write-case-data \"case_timestep~a.cas\"" (%rpgetvar 'udf/timestep)))
            (send_message "save_ready")
        )
    )
    (if (check_message "next")
        (begin
            |END_OF_TIMESTEP_COMMANDS|
            (rpsetvar 'udf/iteration 0)
            (rpsetvar 'udf/timestep (+ (%rpgetvar 'udf/timestep) 1))
            (print-iter-info)
            (send_message "next_ready")
        )
    )
    (if (check_message "continue")
        (begin
            (rpsetvar 'udf/iteration (+ (%rpgetvar 'udf/iteration) 1))
            (print-iter-info)
            (if check_coupling_convergence
                (begin
                    (ti-menu-load-string "solve set reporting-interval 1")
                    (if unsteady
                        (if (= (%rpgetvar 'udf/iteration) 1)
                            (begin
                                (ti-menu-load-string "solve dual-time-iterate 1 0")
                                (ti-menu-load-string "solve iterate 1")
                                (if (%rpgetvar 'solution/converged?)
                                    (begin
                                        (newline)(display "Check convergence :: converged")(newline)
                                        (send_message "solver_converged")
                                    )
                                    (begin
                                        (newline)(display "Check convergence :: not converged")(newline)
                                        (ti-menu-load-string "solve set reporting-interval reporting_interval")
                                        (ti-menu-load-string (format #f "solve iterate ~d" (- flow_iterations 1)))
                                    )
                                )
                            )
                            (begin
                                (ti-menu-load-string "solve dual-time-iterate 0 1")
                                (ti-menu-load-string "solve iterate 1")
                                (if (%rpgetvar 'solution/converged?)
                                    (begin
                                        (newline)(display "Check convergence :: converged")(newline)
                                        (send_message "solver_converged")
                                    )
                                    (begin
                                        (newline)(display "Check convergence :: not converged")(newline)
                                        (ti-menu-load-string "solve set reporting-interval reporting_interval")
                                        (ti-menu-load-string "solve dual-time-iterate 0 0")
                                        (ti-menu-load-string (format #f "solve iterate ~d" (- flow_iterations 1)))
                                    )
                                )
                            )
                        )
                        (begin
                            (ti-menu-load-string "solve mesh-motion y")
                            (ti-menu-load-string "solve iterate 1")
                            (if (%rpgetvar 'solution/converged?)
                                (begin
                                    (newline)(display "Check convergence :: converged")(newline)
                                    (send_message "solver_converged")
                                )
                                (begin
                                    (newline)(display "Check convergence :: not converged")(newline)
                                    (ti-menu-load-string "solve set reporting-interval reporting_interval")
                                    (ti-menu-load-string (format #f "solve iterate ~d" (- flow_iterations 1)))
                                )
                            )
                        )
                    )
                )
                (begin
                    (if unsteady
                        (if (= (%rpgetvar 'udf/iteration) 1)
                            (begin
                                (ti-menu-load-string "solve dual-time-iterate 1 0")
                                (ti-menu-load-string (format #f "solve iterate ~d" flow_iterations))
                            )
                            (begin
                                (ti-menu-load-string "solve dual-time-iterate 0 1")
                                (ti-menu-load-string "solve iterate 1")
                                (ti-menu-load-string "solve dual-time-iterate 0 0")
                                (ti-menu-load-string (format #f "solve iterate ~d" (- flow_iterations 1)))
                            )
                        )
                        (begin
                            (ti-menu-load-string "solve mesh-motion y")
                            (ti-menu-load-string "solve iterate flow_iterations")
                        )
                    )
                )
            )
            (ti-menu-load-string "define user-defined execute-on-demand \"store_pressure_traction::v2023R1\"")
            (send_message "continue_ready")
        )
    )
    (if (check_message "store_grid")
        (begin
            (ti-menu-load-string "define user-defined execute-on-demand \"store_coordinates_id::v2023R1\"")
            (send_message "store_grid_ready")
        )
    )
    (if (check_message "stop")
        (begin
            |END_OF_TIMESTEP_COMMANDS|
            (set! j 1)
            (send_message "stop_ready")
            (system "sleep 0.1")
        )
    )
)
exit y
